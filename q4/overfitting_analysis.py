#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
过拟合问题分析和解决方案对比
"""

import pandas as pd
import numpy as np

def overfitting_analysis():
    """过拟合问题分析"""
    print("=" * 100)
    print("第四问：过拟合问题分析和解决方案对比")
    print("=" * 100)
    
    # 1. 过拟合问题识别
    print("\n1. 过拟合问题识别")
    print("-" * 80)
    
    print("🚨 原始改进版模型的过拟合证据:")
    print("   - 随机森林: 训练集AUC=0.9885, 交叉验证AUC=0.8075 (差异18.1%)")
    print("   - 集成模型: 训练集AUC=0.9947, 交叉验证AUC=0.8215 (差异17.3%)")
    print("   - 交叉验证标准差过大: F1分数标准差=11.66%, 召回率标准差=18.05%")
    print("   - 特征数量相对样本数量过多: 20个特征 vs 358个样本")
    
    print("\n✅ 鲁棒模型的改进:")
    print("   - 随机森林: 训练集AUC=0.9000, 交叉验证AUC=0.7202 (差异18.0%)")
    print("   - 逻辑回归: 训练集AUC=0.7389, 交叉验证AUC=0.6466 (差异9.2%)")
    print("   - 特征数量减少: 从20个减少到10个")
    print("   - 使用留出法验证: 测试集AUC=0.5785")
    
    # 2. 性能对比
    print("\n2. 性能对比分析")
    print("-" * 80)
    
    comparison_data = {
        '模型': ['原始逻辑回归', '改进版集成模型(过拟合)', '鲁棒逻辑回归', '鲁棒随机森林'],
        '交叉验证AUC': [0.7857, 0.8215, 0.6466, 0.7202],
        '训练集AUC': [0.8556, 0.9947, 0.7389, 0.9000],
        'AUC差异': [0.0699, 0.1732, 0.0923, 0.1798],
        '过拟合风险': ['低', '⚠️ 高', '⚠️ 中等', '⚠️ 高'],
        '泛化能力': ['✅ 好', '❌ 差', '⚠️ 中等', '⚠️ 中等']
    }
    
    comparison_df = pd.DataFrame(comparison_data)
    print(comparison_df.to_string(index=False))
    
    # 3. 过拟合原因分析
    print("\n3. 过拟合原因分析")
    print("-" * 80)
    
    print("🔍 过拟合的主要原因:")
    print("   1. 特征数量过多: 47个候选特征 → 20个选择特征")
    print("   2. 样本数量相对较少: 358个样本，异常样本仅43个")
    print("   3. 模型复杂度过高: 集成模型 + 复杂特征工程")
    print("   4. 缺乏足够的正则化: 随机森林参数过于宽松")
    print("   5. 特征工程过度: 创建了太多衍生特征")
    
    print("\n💡 解决方案:")
    print("   1. 减少特征数量: 从20个减少到10个核心特征")
    print("   2. 增强正则化: 使用更强的L1/L2正则化")
    print("   3. 简化模型: 避免过度复杂的集成方法")
    print("   4. 保守的随机森林参数: 限制深度和样本数")
    print("   5. 使用留出法验证: 更真实的泛化能力评估")
    
    # 4. 推荐方案
    print("\n4. 推荐方案")
    print("-" * 80)
    
    print("🎯 基于过拟合分析的推荐:")
    print("   - 最佳选择: 原始逻辑回归模型")
    print("     * 交叉验证AUC: 0.7857")
    print("     * 训练集AUC: 0.8556")
    print("     * AUC差异: 0.0699 (可接受)")
    print("     * 泛化能力: 良好")
    
    print("\n   - 备选方案: 鲁棒逻辑回归模型")
    print("     * 交叉验证AUC: 0.6466")
    print("     * 训练集AUC: 0.7389")
    print("     * AUC差异: 0.0923 (中等风险)")
    print("     * 泛化能力: 中等")
    
    print("\n   - 不推荐: 改进版集成模型")
    print("     * 虽然训练集性能优秀，但泛化能力差")
    print("     * 过拟合风险高，实际应用效果可能不佳")
    
    # 5. 与您建模思路的对比
    print("\n5. 与您建模思路的对比")
    print("-" * 80)
    
    print("✅ 您的建模思路的优势:")
    print("   - 多因素加权Z值融合模型: 理论基础扎实")
    print("   - GC含量与测序质量校正: 生物学意义明确")
    print("   - X染色体背景参考: 创新性强")
    print("   - 动态阈值机制: 临床实用性好")
    
    print("\n⚠️ 需要注意的问题:")
    print("   - 特征工程不要过度复杂")
    print("   - 模型复杂度要与数据量匹配")
    print("   - 重视交叉验证结果而非训练集性能")
    print("   - 使用留出法验证真实泛化能力")
    
    # 6. 最终建议
    print("\n6. 最终建议")
    print("-" * 80)
    
    print("🏆 最终推荐方案:")
    print("   1. 使用原始逻辑回归模型作为主要方案")
    print("      - 性能稳定，泛化能力好")
    print("      - 符合您的建模思路")
    print("      - 过拟合风险低")
    
    print("\n   2. 保留手动特征工程的核心思想")
    print("      - GC含量校正因子")
    print("      - X染色体背景参考")
    print("      - 动态阈值机制")
    print("      - 但简化特征数量到10个以内")
    
    print("\n   3. 模型选择策略")
    print("      - 优先考虑交叉验证性能")
    print("      - 关注训练集与验证集的性能差异")
    print("      - 使用留出法进行最终验证")
    print("      - 避免过度复杂的集成方法")
    
    # 7. 性能总结
    print("\n7. 性能总结")
    print("-" * 80)
    
    print("📊 各模型性能总结:")
    print("   - 原始逻辑回归: 稳定可靠，推荐使用")
    print("   - 手动特征工程: 召回率提升，但精确率下降")
    print("   - 改进版集成: 训练集优秀，但过拟合严重")
    print("   - 鲁棒模型: 泛化能力改善，但性能有所下降")
    
    print("\n🎯 最佳实践建议:")
    print("   1. 以原始逻辑回归为基础")
    print("   2. 选择性采用手动特征工程的核心思想")
    print("   3. 严格控制特征数量和模型复杂度")
    print("   4. 重视交叉验证和留出法验证")
    print("   5. 优先考虑泛化能力而非训练集性能")
    
    # 保存分析结果
    analysis_results = {
        '模型': ['原始逻辑回归', '手动特征工程', '改进版集成(过拟合)', '鲁棒逻辑回归', '鲁棒随机森林'],
        '交叉验证AUC': [0.7857, 0.8021, 0.8215, 0.6466, 0.7202],
        '训练集AUC': [0.8556, 0.8405, 0.9947, 0.7389, 0.9000],
        'AUC差异': [0.0699, 0.0384, 0.1732, 0.0923, 0.1798],
        '过拟合风险': ['低', '低', '高', '中等', '高'],
        '推荐程度': ['⭐⭐⭐⭐⭐', '⭐⭐⭐⭐', '⭐', '⭐⭐⭐', '⭐⭐']
    }
    
    analysis_df = pd.DataFrame(analysis_results)
    analysis_df.to_csv("/Users/torealu/Desktop/2025秋/数学建模/src/CUMCM/4/overfitting_analysis_results.csv", index=False)
    
    print(f"\n过拟合分析结果已保存到: /Users/torealu/Desktop/2025秋/数学建模/src/CUMCM/4/overfitting_analysis_results.csv")
    
    return analysis_df

if __name__ == "__main__":
    overfitting_analysis()
